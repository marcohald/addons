---
# yamllint disable rule:line-length rule:truthy
name: Build add-on

env:
  BUILD_ARGS: "--test"
  MONITORED_FILES: "apparmor.txt build.yaml config.yaml Dockerfile data rootfs"

on:
  pull_request:
    branches: ["master"]
  push:
    branches: ["master"]
  workflow_dispatch:
    inputs:
      addons:
        description: 'Addons to build'
        required: true
        default: '["letsencrypt"]'
        type: string
      arch:
        description: 'Archs to build'
        required: true
        default: '["amd64"]'
        type: string
      force_build:
        description: 'Force Build'
        required: true
        default: true
        type: boolean

jobs:

  build_manual:
    runs-on: ubuntu-latest
    if: inputs.force_build && github.event_name != 'push'
    name: Build ${{ matrix.arch }} ${{ matrix.addon }} add-on
    strategy:
      matrix:
        # addon: ${{ inputs.addons  }} 
        addon: ${{ fromJson(inputs.addons) }}
        # arch: ["aarch64", "amd64", "armhf", "armv7", "i386"]
        arch: ${{ fromJson(inputs.arch) }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4.2.2

      - name: Get information
        id: info
        uses: home-assistant/actions/helpers/info@master
        with:
          path: "./${{ matrix.addon }}"

      - name: Check add-on
        id: check
        run: |
          if [[ "${{ steps.info.outputs.architectures }}" =~ ${{ matrix.arch }} ]]; then
             echo "build_arch=true" >> "$GITHUB_OUTPUT";
           else
             echo "${{ matrix.arch }} is not a valid arch for ${{ matrix.addon }}, skipping build";
          fi
          
      - name: Set build arguments
        run: |
          echo "BUILD_ARGS=" >> $GITHUB_ENV;

      - name: Login to DockerHub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build ${{ matrix.addon }} add-on
        if: steps.check.outputs.build_arch == 'true'
        uses: home-assistant/builder@2024.08.2
        with:
          args: |
            ${{ env.BUILD_ARGS }} \
            --${{ matrix.arch }} \
            --target /data/${{ matrix.addon }} \
            --addon \
            --docker-hub ${{ secrets.DOCKERHUB_USERNAME }} \
            --docker-user ${{ secrets.DOCKERHUB_USERNAME }} \
            --docker-password ${{ secrets.DOCKERHUB_TOKEN }}

  # init:
  #   runs-on: ubuntu-latest
  #   name: Initialize builds
  #   outputs:
  #     changed_files: ${{ steps.changed_files.outputs.all }}
  #     changed_addons: ${{ steps.changed_addons.outputs.addons }}
  #     changed: ${{ steps.changed_addons.outputs.changed }}
  #   steps:
  #     - name: Check out the repository
  #       uses: actions/checkout@v4.2.2

  #     - name: Get changed files
  #       id: changed_files
  #       uses: masesgroup/retrieve-changed-files@v3.0.0
  #       if: github.event_name == 'push'

  #     - name: Get add-ons
  #       id: addons
  #       run: |
  #         declare -a addons
  #         for addon in $(find ./ -name config.yaml | cut -d "/" -f2 | sort -u); do
  #           addons+=("$addon");
  #         done
  #         echo "addons=${addons[@]}" >> "$GITHUB_OUTPUT"

  #     - name: Get changed add-ons
  #       id: changed_addons
  #       run: |
  #         declare -a changed_addons
  #         for addon in ${{ steps.addons.outputs.addons }}; do
  #           if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon ]]; then
  #             for file in ${{ env.MONITORED_FILES }}; do
  #                 if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon/$file ]]; then
  #                   if [[ ! "${changed_addons[@]}" =~ $addon ]]; then
  #                     changed_addons+=("\"${addon}\",");
  #                   fi
  #                 fi
  #             done
  #           fi
  #         done

  #         changed=$(echo ${changed_addons[@]} | rev | cut -c 2- | rev)
  #         if [[ -n ${changed} ]]; then
  #           echo "Changed add-ons: $changed";
  #           echo "changed=true" >> "$GITHUB_OUTPUT";
  #           echo "addons=[$changed]" >> "$GITHUB_OUTPUT";
  #         else
  #           echo "No add-on had any monitored files changed (${{ env.MONITORED_FILES }})";
  #         fi
  # test:
  #   needs: init
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Debug step to print variable value
  #     - name: Debug Variable
  #       run: |
  #         echo "The value of the variable is: ${{ needs.init.outputs.changed_addons }}"
  #         echo "The value of another variable is: ${{ inputs.addons }}"
  #     # Check if the variable is not empty before calling fromJson
  #     - name: Parse JSON (if not empty)
  #       id: parse_json
  #       if: ${{ needs.init.outputs.changed_addons != '' }}  # Only run if the variable is not empty
  #       run: |
  #         echo "The variable is not empty, parsing with fromJson."
  #         echo "::set-output name=addon::${{ fromJson(needs.init.outputs.changed_addons) }}"

  #     # Handle the case when the variable is empty
  #     - name: Skip JSON parsing (if empty)
  #       if: ${{ needs.init.outputs.changed_addons == ''}}  # Only run if the variable is empty
  #       run: |
  #         echo "The variable is empty, skipping fromJson parsing."

  #     # Use the parsed variable (if available)
  #     - name: Use Parsed Variable
  #       run: |
  #         echo "Parsed JSON: ${{ steps.parse_json.outputs.addon }}"

  # build:
  #   needs: init
  #   runs-on: ubuntu-latest
  #   if: needs.init.outputs.changed == 'true' 
  #   name: Build ${{ matrix.arch }} ${{ matrix.addon }} add-on
  #   strategy:
  #     matrix:
  #       addon: ${{ fromJson(needs.init.outputs.changed_addons) }} 
  #       arch: ["aarch64", "amd64", "armhf", "armv7", "i386"]

  #   steps:
  #     - name: Check out repository
  #       uses: actions/checkout@v4.2.2

  #     - name: Get information
  #       id: info
  #       uses: home-assistant/actions/helpers/info@master
  #       with:
  #         path: "./${{ matrix.addon }}"

  #     - name: Check add-on
  #       id: check
  #       run: |
  #         if [[ "${{ steps.info.outputs.architectures }}" =~ ${{ matrix.arch }} ]]; then
  #            echo "build_arch=true" >> "$GITHUB_OUTPUT";
  #          else
  #            echo "${{ matrix.arch }} is not a valid arch for ${{ matrix.addon }}, skipping build";
  #         fi

  #     - name: Set build arguments
  #       if: steps.check.outputs.build_arch == 'true'
  #       run: |
  #         if [[ -z "${{ github.head_ref }}" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
  #             echo "BUILD_ARGS=--docker-hub-check" >> $GITHUB_ENV;
  #         fi

  #     - name: Login to DockerHub
  #       if: env.BUILD_ARGS == '--docker-hub-check'
  #       uses: docker/login-action@v3.3.0
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build ${{ matrix.addon }} add-on
  #       if: steps.check.outputs.build_arch == 'true'
  #       uses: home-assistant/builder@2024.08.2
  #       with:
  #         args: |
  #           ${{ env.BUILD_ARGS }} \
  #           --${{ matrix.arch }} \
  #           --target /data/${{ matrix.addon }} \
  #           --addon

